{"ast":null,"code":"import Axios from \"axios\";\nimport Cookie from 'js-cookie';\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL } from \"../constants/userConstants\";\nimport { USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants/userConstants\";\nimport { USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL } from \"../constants/userConstants\"; // const { default: Axios } = require(\"axios\");\n\nconst signin = (email, password) => async dispatch => {\n  dispatch({\n    type: USER_SIGNIN_REQUEST,\n    payload: {\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/signin\", {\n      email,\n      password\n    });\n    dispatch({\n      type: USER_SIGNIN_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_SIGNIN_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst update = ({\n  userId,\n  name,\n  email,\n  password\n}) => async (dispatch, getState) => {\n  const {\n    userSignin: {\n      userInfo\n    }\n  } = getState();\n  dispatch({\n    type: USER_UPDATE_REQUEST,\n    payload: {\n      userId,\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.put(\"/api/users/\" + userId, {\n      name,\n      email,\n      password\n    }, {\n      headers: {\n        Authorization: 'Bearer' + userInfo.token\n      }\n    });\n    dispatch({\n      type: USER_UPDATE_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_UPDATE_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst register = (name, email, password) => async dispatch => {\n  dispatch({\n    type: USER_REGISTER_REQUEST,\n    payload: {\n      name,\n      email,\n      password\n    }\n  });\n\n  try {\n    const {\n      data\n    } = await Axios.post(\"/api/users/register\", {\n      name,\n      email,\n      password\n    });\n    dispatch({\n      type: USER_REGISTER_SUCCESS,\n      payload: data\n    });\n    Cookie.set('userInfo', JSON.stringify(data));\n  } catch (error) {\n    dispatch({\n      type: USER_REGISTER_FAIL,\n      payload: error.message\n    });\n  }\n};\n\nconst logout = () => dispatch => {\n  Cookie.remove(\"userInfo\");\n  dispatch({\n    type: USER_LOGOUT\n  });\n};\n\nexport { signin, register, logout, update };","map":{"version":3,"sources":["C:/Users/bktes/development/eshop/eshop/frontend/src/actions/userActions.js"],"names":["Axios","Cookie","USER_SIGNIN_REQUEST","USER_SIGNIN_SUCCESS","USER_SIGNIN_FAIL","USER_LOGOUT","USER_REGISTER_FAIL","USER_REGISTER_REQUEST","USER_REGISTER_SUCCESS","USER_UPDATE_REQUEST","USER_UPDATE_SUCCESS","USER_UPDATE_FAIL","signin","email","password","dispatch","type","payload","data","post","set","JSON","stringify","error","message","update","userId","name","getState","userSignin","userInfo","put","headers","Authorization","token","register","logout","remove"],"mappings":"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","sourcesContent":["import Axios from \"axios\";\r\nimport Cookie from 'js-cookie';\r\nimport { USER_SIGNIN_REQUEST, USER_SIGNIN_SUCCESS, USER_SIGNIN_FAIL } from \"../constants/userConstants\";\r\nimport { USER_LOGOUT, USER_REGISTER_FAIL, USER_REGISTER_REQUEST, USER_REGISTER_SUCCESS } from \"../constants/userConstants\";\r\nimport { USER_UPDATE_REQUEST, USER_UPDATE_SUCCESS, USER_UPDATE_FAIL } from \"../constants/userConstants\";\r\n\r\n// const { default: Axios } = require(\"axios\");\r\n\r\nconst signin = (email, password) => async (dispatch) => {\r\n    dispatch({ type: USER_SIGNIN_REQUEST, payload: { email, password }});\r\n    try {\r\n        const { data } = await Axios.post(\"/api/users/signin\", { email, password });\r\n        dispatch({ type: USER_SIGNIN_SUCCESS, payload: data });\r\n        Cookie.set('userInfo', JSON.stringify(data));\r\n    } catch (error) {\r\n        dispatch({ type: USER_SIGNIN_FAIL, payload: error.message });\r\n    }\r\n}\r\n\r\nconst update = ({ userId, name, email, password }) => async (dispatch, getState) => {\r\n    const { userSignin: { userInfo } } = getState();\r\n    dispatch({ type: USER_UPDATE_REQUEST, payload: { userId, name, email, password }});\r\n    try {\r\n        const { data } = await Axios.put(\"/api/users/\" + userId,\r\n         { name, email, password }, { \r\n             headers: {\r\n                Authorization: 'Bearer' + userInfo.token\r\n            }\r\n        });\r\n        dispatch({ type: USER_UPDATE_SUCCESS, payload: data });\r\n        Cookie.set('userInfo', JSON.stringify(data));\r\n        } catch (error) {\r\n        dispatch({ type: USER_UPDATE_FAIL, payload: error.message });\r\n    }\r\n}\r\n\r\nconst register = (name,email, password) => async (dispatch) => {\r\n    dispatch({ type: USER_REGISTER_REQUEST, payload: { name, email, password }});\r\n    try {\r\n        const { data } = await Axios.post(\"/api/users/register\", { name, email, password });\r\n        dispatch({ type: USER_REGISTER_SUCCESS, payload: data });\r\n        Cookie.set('userInfo', JSON.stringify(data));\r\n    } catch (error) {\r\n        dispatch({ type: USER_REGISTER_FAIL, payload: error.message });\r\n    }\r\n}\r\n\r\nconst logout = () => (dispatch) => {\r\n    Cookie.remove(\"userInfo\");\r\n    dispatch({ type:USER_LOGOUT })\r\n}\r\n\r\nexport { signin, register, logout, update };"]},"metadata":{},"sourceType":"module"}